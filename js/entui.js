// Generated by CoffeeScript 1.9.0
(function() {
  var EntUI;

  EntUI = (function() {
    function EntUI() {
      this.entity_ok = {};
      this.prefs = [];
      this.tables = {};
      this.objs = {};
    }

    EntUI.prototype.meta = {};

    EntUI.prototype.callbacks = {};

    EntUI.prototype.start = function(target, entity_name, entity_id) {
      if (entity_id) {
        return this.form(target, entity_name, entity_id);
      } else {
        return this.table(target, entity_name);
      }
    };

    EntUI.prototype.table = function(target, entity_name, parent_prefix, parent_type, parent_id, parent_atr, ret_func_uplink, ret_fld_list) {
      var is_window, met, open_dialog_func, prefix, reload_func, select_uplink_func, table_interface, table_place, table_type;
      if (parent_prefix == null) {
        parent_prefix = "";
      }
      if (!this.verify_meta(entity_name)) {
        return false;
      }
      met = this.meta[entity_name];
      prefix = parent_prefix + '-t-' + entity_name;
      this.add_prefix(prefix, entity_name);
      table_place = $("<div class=\"table-place\" id=\"" + prefix + "\"/>");
      table_type = ret_func_uplink ? 'uplink' : (_.isEmpty(parent_prefix) ? 'root' : 'downlink');
      is_window = table_type === 'uplink' && met.opts.uplink.window;
      table_interface = met.opts[table_type]["interface"];
      reload_func = function() {};
      open_dialog_func = (function(_this) {
        return function(entity_id, p_type, p_id) {
          return _this.form(target, entity_name, entity_id, p_type, p_id, prefix, reload_func);
        };
      })(this);
      select_uplink_func = (function(_this) {
        return function(data) {
          if (ret_func_uplink) {
            ret_func_uplink(data);
            if (is_window) {
              return _this.dialog_close(table_place, prefix);
            }
          }
        };
      })(this);
      this.objs[prefix] = new this[table_interface](entity_name, met, this.callbacks[entity_name], table_place, prefix, table_type, parent_type, parent_id, parent_atr, open_dialog_func, select_uplink_func, ret_fld_list);
      this.objs[prefix].build();
      reload_func = (function(_this) {
        return function() {
          return _this.objs[prefix].build();
        };
      })(this);
      $(target).append(table_place);
      if (is_window) {
        this.make_dialog(table_place, {
          title: met.window_header || 'Диалог выбора'
        });
      }
      return true;
    };

    EntUI.prototype.form = function(target, entity_name, entity_id, parent_type, parent_id, parent_prefix, reload_func) {
      var form_interface, form_place, met, open_parent_func, prefix, proxy_uplink_func, show_place, tabs_place, ttl, ul, _ref;
      if (parent_prefix == null) {
        parent_prefix = "";
      }
      if (!this.verify_meta(entity_name)) {
        return false;
      }
      met = this.meta[entity_name];
      prefix = parent_prefix + '-f-' + entity_name;
      this.add_prefix(prefix, entity_name);
      show_place = $("<div class=\"show-place\" id=\"" + prefix + "\" />");
      form_place = $("<div class=\"form-place\" id=\"" + prefix + "-f\"/>");
      form_interface = met.opts['form']["interface"];
      proxy_uplink_func = (function(_this) {
        return function(uplink_entity_name, ret_fld_list, ret_func_uplink) {
          return _this.table(form_place, uplink_entity_name, prefix, null, null, ret_func_uplink, ret_fld_list);
        };
      })(this);
      open_parent_func = (function(_this) {
        return function(p_type, p_id) {
          return _this.form(form_place, p_type, p_id, parent_type, parent_id, prefix, function() {
            return _this.objs[prefix].build();
          });
        };
      })(this);
      this.objs[prefix] = new this[form_interface](entity_name, met, this.callbacks[entity_name], form_place, prefix, entity_id, parent_type, parent_id, reload_func, proxy_uplink_func, open_parent_func);
      this.objs[prefix].build();
      show_place.append(form_place);
      tabs_place = $("<div class=\"tabs-place\" id=\"" + prefix + "-tabs\" />");
      show_place.append(tabs_place);
      ul = $("<ul />");
      tabs_place.append(ul);
      _.each(met.form_tabs || [], (function(_this) {
        return function(tab) {
          var tab_pls, tab_pref;
          tab_pref = "-" + prefix + "-tab-" + tab.name;
          ul.append($("<li><a href=\"#" + tab_pref + "\">" + (tab.label || tab.name) + "</a></li>"));
          tab_pls = $("<div id=\"" + tab_pref + "\"></div>");
          tabs_place.append(tab_pls);
          if (tab.kind === 'downlink') {
            return _this.table(tab_pls, tab.entity || tab.name, prefix, entity_name, entity_id, tab.atr);
          } else {
            if (_this["EntUI_tab_" + tab.kind]) {
              _this.add_prefix(tab_pref, entity_name);
              _this.objs[tab_pref] = new _this["EntUI_tab_" + tab.kind](tab_pls, tab_pref, tab, _this.callbacks, entity_name, entity_id);
              return _this.objs[tab_pref].build();
            } else {
              return _this.ac("ERROR: Не найден способ создания таба '" + tab.kind + "' для сущности '" + entity_name);
            }
          }
        };
      })(this));
      $(target).append(show_place);
      ttl = entity_id === 'new' ? met.form_header_new || 'Новый объект' : ((_ref = met.link) != null ? _ref.form_header : void 0) || met.form_header || 'Карточка';
      this.make_dialog(show_place, {
        title: ttl
      });
      tabs_place.tabs({
        activate: function(event, ui) {
          return ui.newTab.blur();
        }
      });
      tabs_place.find('a').click(function() {
        return $(this).blur();
      });
      return true;
    };

    EntUI.prototype.verify_meta = function(entity_name) {
      var default_opts, is_interface_err, met, o;
      if (this.entity_ok[entity_name]) {
        return true;
      }
      if (!(met = this.meta[entity_name])) {
        this.ac("ERROR Не найдена мета для сущности '" + entity_name + "'");
        return false;
      }
      if (_.isEmpty(met.cols)) {
        this.ac("ERROR Для сущности '" + entity_name + "' не указаны колонки таблицы");
        return false;
      }
      if (met.opts == null) {
        met.opts = {};
      }
      default_opts = {
        root: {
          window: false,
          create: true,
          edit: true,
          paging: true,
          filters: true,
          hidden_cols: [],
          "interface": 'EntUIDataTable'
        },
        uplink: {
          window: true,
          create: true,
          edit: false,
          paging: true,
          filters: true,
          hidden_cols: [],
          "interface": 'EntUIDataTable'
        },
        downlink: {
          window: false,
          create: true,
          edit: true,
          paging: true,
          filters: false,
          hidden_cols: [],
          "interface": 'EntUIDataTable'
        },
        form: {
          readonly: false,
          hidden_cols: [],
          "interface": 'EntUIEditForm'
        }
      };
      is_interface_err = null;
      _.each(_.keys(default_opts), (function(_this) {
        return function(k) {
          var m, _ref, _ref1;
          m = ((_ref = met.opts) != null ? _ref[k] : void 0) || {};
          met.opts[k] = m = $.extend({}, default_opts[k], m);
          if ((_ref1 = met[k]) != null ? _ref1.hidden_cols : void 0) {
            met.opts[k].hidden_cols = met[k].hidden_cols;
          }
          if (!_this[m["interface"]]) {
            return is_interface_err = k;
          }
        };
      })(this));
      if (is_interface_err) {
        this.ac("ERROR Для сущности '" + entity_name + "' не найден класс " + met.opts[is_interface_err]["interface"] + " указанный в " + is_interface_err + " ");
        return false;
      }
      o = met.opts;
      if (o.root.create || o.downlink.create || o.uplink.create || o.root.edit || o.downlink.edit || o.uplink.edit) {
        if (!met.form) {
          this.ac("ERROR Для сущности '" + entity_name + "' не задана форма");
          return false;
        }
      }
      this.ac("OK Проверена мета для сущности '" + entity_name + "'");
      this.entity_ok[entity_name] = true;
      return true;
    };

    EntUI.prototype.make_dialog = function(target, pars) {
      var deflt;
      deflt = {
        "autoOpen": true,
        "modal": true,
        "width": "auto",
        "height": "auto"
      };
      target.dialog($.extend({}, deflt, pars));
      return target.on("dialogclose", (function(_this) {
        return function() {
          return _this.del_prefix(target.attr('id'));
        };
      })(this));
    };

    EntUI.prototype.add_prefix = function(prefix, entity_name) {
      if (_.indexOf(this.prefs, prefix) < 0) {
        return this.prefs.push(prefix);
      } else {
        return this.ac("ERROR Для сущности '" + entity_name + "' появился дублирующийся префикс " + prefix);
      }
    };

    EntUI.prototype.del_prefix = function(prefix) {
      var pr;
      if (_.indexOf(this.prefs, prefix) >= 0) {
        while (pr = this.prefs.pop()) {
          if (this.objs[pr]) {
            delete this.objs[pr];
          }
          if (pr === prefix) {
            return;
          }
        }
      }
    };

    EntUI.prototype.dialog_close = function(targrt, prefix) {
      return targrt.dialog("close");
    };

    EntUI.prototype.ac = function(msg) {
      return console.log(msg);
    };

    return EntUI;

  })();

  window.EntUI = EntUI;

  window.EntUI_add_entity = function(entity_name, entity_meta) {
    EntUI.prototype.meta[entity_name] = entity_meta;
    return EntUI.prototype.callbacks[entity_name] = EntUI.prototype.callbacks[entity_name] || {};
  };

  window.EntUI_add_callback = function(entity_name, callback_name, func) {
    if (typeof func !== "function") {
      return null;
    }
    EntUI.prototype.callbacks[entity_name] = EntUI.prototype.callbacks[entity_name] || {};
    return EntUI.prototype.callbacks[entity_name][callback_name] = func;
  };

  jQuery.fn.EntUI = function(entity_name, entity_id) {
    var obj;
    if (entity_name) {
      obj = new EntUI();
      obj.start($(this[0]), entity_name, entity_id);
      jQuery.data($(this[0]), "EntUI", obj);
      return obj;
    } else {
      return jQuery.data($(this[0]), "EntUI");
    }
  };

}).call(this);
