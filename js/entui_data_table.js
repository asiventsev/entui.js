// Generated by CoffeeScript 1.9.0
(function() {
  var EntUIDataTable;

  EntUIDataTable = (function() {
    function EntUIDataTable(entity_name, meta, callbacks, target, prefix, table_type, parent_type, parent_id, open_dialog_func, select_uplink_func, ret_fld_list) {
      this.entity_name = entity_name;
      this.meta = meta;
      this.opts = meta.opts[table_type];
      this.callbacks = callbacks;
      this.target = target;
      this.prefix = prefix;
      this.table_type = table_type;
      this.parent_type = parent_type;
      this.parent_id = parent_id;
      this.open_dialog_func = open_dialog_func;
      this.select_uplink_func = select_uplink_func;
      this.ret_fld_list = ret_fld_list;
      this.clear();
    }

    EntUIDataTable.prototype.build = function() {
      this.clear();
      this.build_filters();
      this.buld_button();
      return this.build_table();
    };

    EntUIDataTable.prototype.clear = function() {
      this.target.empty();
      this.wait_window = null;
      this.et_wrap = null;
      this.visible_data = [];
      this.col_numbers = {};
      this.table = null;
      return this.is_dlg_open = false;
    };

    EntUIDataTable.prototype.build_filters = function() {
      var filter_table, req, tr_lab, tr_sel;
      filter_table = $('<table class="filter_table"/>').hide();
      tr_lab = $('<tr>');
      tr_sel = $('<tr>');
      _.each(this.meta.filters || [], (function(_this) {
        return function(f) {
          var clear_filters_button, col, lab, sel;
          lab = f.label;
          if (!lab) {
            col = _.find(_this.meta.cols, function(c) {
              return c.atr === f.atr;
            });
            if (col) {
              lab = col.label;
            }
            if (lab == null) {
              lab = f.atr;
            }
          }
          tr_lab.append("<td>" + lab + "</td>");
          sel = $("<select id=\"" + _this.prefix + "-flt-" + f.atr + "\" class=\"" + _this.prefix + "-seltag\" />");
          sel.change(function() {
            return _this.filter_change(f.atr, sel.val());
          });
          tr_sel.append($('<td />').append(sel));
          clear_filters_button = $("<td id=\"" + _this.prefix + "-entity_clear_filters\" class=\"icon icon-false\"> </td>").hide();
          clear_filters_button.click(function() {
            return _this.clear_filters();
          });
          tr_lab.append($("<td />"));
          tr_sel.append(clear_filters_button);
          return filter_table.append(tr_lab).append(tr_sel);
        };
      })(this));
      if (this.opts.filters && this.meta.filters) {
        this.wait();
        req = $.getJSON("/data/filters/" + this.entity_name, {
          type: 'json',
          prefix: this.prefix
        });
        req.error((function(_this) {
          return function() {
            return _this.ac("ERROR: Ошибка получения фильтров для сущности " + _this.entity_name);
          };
        })(this));
        req.success((function(_this) {
          return function(data) {
            _.each(_.keys(data), function(k) {
              var sel;
              sel = tr_sel.find("#" + _this.prefix + "-flt-" + k);
              if (sel.length === 1) {
                _.each(data[k], function(s) {
                  var val;
                  val = s[1] || s[0];
                  return sel.append($("<option>").val(val).text(s[0]));
                });
                sel[0].selectedIndex = 0;
                if (_this.callbacks.table_after_filter_setup) {
                  return _this.callbacks.table_after_filter_setup(sel);
                }
              }
            });
            _this["continue"]();
            return filter_table.show();
          };
        })(this));
        return this.target.append(filter_table);
      }
    };

    EntUIDataTable.prototype.filter_change = function(atr, val) {
      var sel, show, _i, _len, _ref;
      if (!this.table_update()) {
        return;
      }
      show = false;
      _ref = this.target.find('.filter_table select');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sel = _ref[_i];
        if ($(sel).val() !== '') {
          show = true;
        }
      }
      if (show) {
        return this.target.find("#" + this.prefix + "-entity_clear_filters").show();
      } else {
        return this.target.find("#" + this.prefix + "-entity_clear_filters").hide();
      }
    };

    EntUIDataTable.prototype.table_update = function() {
      if (this.table) {
        if (this.table.fnSettings) {
          this.table.fnSettings._iDisplayStart = 0;
          this.table.fnDraw();
          return true;
        } else {
          this.ac("ERROR: не удалось обновить таблицу " + this.prefix);
          return false;
        }
      }
    };

    EntUIDataTable.prototype.clear_filters = function() {
      var sel, _i, _len, _ref;
      _ref = this.target.find('.filter_table select');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sel = _ref[_i];
        $(sel).val('');
      }
      this.target.find("#" + this.prefix + "-entity_clear_filters").hide();
      return this.table_update();
    };

    EntUIDataTable.prototype.buld_button = function() {
      var button_data, buttons_div;
      buttons_div = $('<div class="contextual" />');
      button_data = [
        {
          icon: "true",
          name: "select_uplink",
          text: "выбрать&nbsp;",
          hide: true,
          func: (function(_this) {
            return function() {
              var select_flds;
              select_flds = _this.get_select_fld();
              if (select_flds && _this.select_uplink_func) {
                _this.select_uplink_func(select_flds);
              }
              return false;
            };
          })(this)
        }, {
          icon: "add",
          name: "create_entity",
          text: this.meta.button_label_create || 'добавить&nbsp;',
          hide: !this.opts.create,
          func: (function(_this) {
            return function() {
              if (_this.open_dialog_func) {
                _this.open_dialog_func('new', _this.parent_type, _this.parent_id);
              }
              return false;
            };
          })(this)
        }
      ];
      _.each(button_data, (function(_this) {
        return function(bd) {
          var button;
          button = $("<a id=\"" + _this.prefix + "-" + bd.name + "\" class=\"icon icon-" + bd.icon + "\">" + bd.text + "</a>");
          button.click(bd.func);
          if (bd.hide) {
            button.hide();
          }
          return buttons_div.append(button);
        };
      })(this));
      return this.target.append(buttons_div);
    };

    EntUIDataTable.prototype.build_table = function() {
      var c, et, hiden_numbers, i, table_pars, th_s, _i, _len, _ref;
      this.target.append($("<h2>" + this.meta.table_header + "</h2>"));
      this.target.append($("<style>#" + this.prefix + "-entity_table td{text-align:center;}</style>"));
      et = $("<table id=\"" + this.prefix + "-entity_table\"></table>");
      th_s = "<thead><tr>";
      th_s = _.reduce(this.meta.cols, ((function(_this) {
        return function(s, c) {
          return s += "<th>" + c.label + "</th>";
        };
      })(this)), th_s);
      th_s += "</tr></thead>";
      et.append($(th_s));
      this.target.append(et);
      _ref = this.meta.cols;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        this.col_numbers[c.atr] = i;
      }
      hiden_numbers = _.map(this.opts.hidden_cols, (function(_this) {
        return function(c) {
          return _this.col_numbers[c];
        };
      })(this));
      table_pars = {
        sAjaxSource: this.meta.url_table || ("/data/table/" + this.entity_name),
        bPaginate: !(!this.opts.paging),
        aoColumnDefs: [
          {
            bVisible: false,
            aTargets: hiden_numbers
          }
        ],
        fnServerParams: (function(_this) {
          return function(aoData) {
            _.each(_this.meta.filters || [], function(f) {
              var v;
              v = _this.target.find($("#" + _this.prefix + "-flt-" + f.atr)).val();
              if (v) {
                return aoData.push({
                  "name": f.atr,
                  "value": v
                });
              }
            });
            if (_this.parent_id) {
              aoData.push({
                "name": "parent_id",
                "value": _this.parent_id
              });
              aoData.push({
                "name": "parent_type",
                "value": _this.parent_type
              });
              aoData.push({
                "name": "prefix",
                "value": _this.prefix
              });
              aoData.push({
                "name": "parent_prefix",
                "value": _this.get_parent_prefix()
              });
            }
            if (_this.callbacks.table_server_params) {
              return _this.callbacks.table_server_params(et, aoData);
            }
          };
        })(this),
        fnCreatedRow: (function(_this) {
          return function(nRow, aData, iDataIndex) {
            nRow.id = _this.prefix + "-tr-" + iDataIndex;
            $(nRow).dblclick(function() {
              return _this.open_dialog_func(_this.get_id_by_row(nRow.id), _this.parent_type, _this.parent_id);
            });
            $(nRow).click(function() {
              return _this.uplink_make_row_selection(iDataIndex, $(nRow));
            });
            if (_this.callbacks.table_created_row) {
              return _this.callbacks.table_created_row(nRow, aData, iDataIndex, _this.prefix);
            }
          };
        })(this),
        fnDrawCallback: (function(_this) {
          return function(oSettings) {
            if (_this.callbacks.table_after_redraw) {
              _this.callbacks.table_after_redraw(et);
            }
            return _this.visible_data = _.map(oSettings.aoData, function(d) {
              return d._aData;
            });
          };
        })(this)
      };
      this.table = this.make_datatable(et, table_pars);
      return this.table.fnSetFilteringDelay(3000);
    };

    EntUIDataTable.prototype.get_select_fld = function() {
      var ret, row_num, rows;
      rows = this.table.find('.row_selected');
      if (rows.length !== 1) {
        return null;
      }
      row_num = rows.attr('id').split('-').pop() * 1;
      ret = {};
      _.each(this.ret_fld_list || [], (function(_this) {
        return function(fld) {
          var col_num;
          col_num = _this.col_numbers[fld];
          return ret[fld] = _this.visible_data[row_num][col_num];
        };
      })(this));
      return ret;
    };

    EntUIDataTable.prototype.uplink_make_row_selection = function(row_number, row) {
      var clear;
      if (this.table_type !== 'uplink') {
        return false;
      }
      clear = (function(_this) {
        return function() {
          _this.table.find('.row_selected').removeClass('row_selected');
          _this.table.find('._odd').addClass('odd').removeClass('_odd');
          return _this.table.find('._even').addClass('even').removeClass('_even');
        };
      })(this);
      if (row.hasClass('row_selected')) {
        clear();
        return this.target.find("#" + this.prefix + "-select_uplink").hide();
      } else {
        clear();
        row.addClass('row_selected');
        if (row.hasClass('odd')) {
          row.addClass('_odd').removeClass('odd');
        }
        if (row.hasClass('even')) {
          row.addClass('_even').removeClass('even');
        }
        return this.target.find("#" + this.prefix + "-select_uplink").show();
      }
    };

    EntUIDataTable.prototype.make_datatable = function(target, pars) {
      var default_pars;
      default_pars = {
        oLanguage: {
          sLengthMenu: "Отображено _MENU_ записей на страницу",
          sSearch: "Поиск:",
          sZeroRecords: "Ничего не найдено - извините",
          sInfo: "Показано с _START_ по _END_ из _TOTAL_ записей",
          sInfoEmpty: "Показано с 0 по 0 из 0 записей",
          sInfoFiltered: "(отобрано из всего _MAX_ записей)",
          oPaginate: {
            sFirst: "Первая",
            sLast: "Посл.",
            sNext: "След.",
            sPrevious: "Пред."
          }
        },
        aaSorting: [[0, "desc"]],
        iDisplayLength: this.table_type === 'downlink' ? 10 : 25,
        aLengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Все"]],
        bAutoWidth: false,
        bProcessing: true,
        bServerSide: true
      };
      return target.dataTable($.extend({}, default_pars, pars));
    };

    EntUIDataTable.prototype.get_id_by_row = function(row_id) {
      var row_number;
      row_number = _.last(row_id.split('-')) * 1;
      if (this.col_numbers.id === null) {
        console.log(this.col_numbers.id);
        this.ac("ERROR: в таблице нет поля 'id'");
        return null;
      }
      return this.visible_data[row_number][this.col_numbers.id];
    };

    EntUIDataTable.prototype.ac = function(msg) {
      return console.log("EntUIDataTable: " + msg);
    };

    EntUIDataTable.prototype.wait = function(msg) {
      if (msg == null) {
        msg = "Ожидание ответа от сервера...";
      }
      this.is_dlg_open = true;
      return setTimeout(((function(_this) {
        return function() {
          if (!_this.wait_window) {
            _this.wait_window = $("<div  id=\"wait_window\">" + msg + "</div>").hide();
            _this.target.append(_this.wait_window);
            _this.wait_window.dialog({
              autoOpen: false,
              title: "Передача данных",
              modal: true,
              width: "auto",
              height: "auto"
            });
          }
          if (_this.is_dlg_open) {
            _this.wait_window.text(msg);
            return _this.wait_window.dialog("open");
          }
        };
      })(this)), 1000);
    };

    EntUIDataTable.prototype["continue"] = function() {
      if (this.wait_window) {
        this.wait_window.dialog("close");
      }
      return this.is_dlg_open = false;
    };

    EntUIDataTable.prototype.get_parent_prefix = function() {
      var l;
      l = this.prefix.split('-t-');
      if (l.length === 1 && l[0] === "") {
        return null;
      }
      l.pop();
      return l.join('-t-');
    };

    return EntUIDataTable;

  })();

  EntUI.prototype.EntUIDataTable = EntUIDataTable;

}).call(this);
